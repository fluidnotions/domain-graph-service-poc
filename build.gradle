plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id "com.netflix.dgs.codegen" version "5.11.1"
}

group = 'com.fluidnotions'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:latest.release"))
    implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'
    implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-subscriptions-websockets-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    runtimeOnly 'org.postgresql:postgresql'

    implementation 'net.datafaker:datafaker:1.9.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.ocpsoft.prettytime:prettytime:5.0.6.Final'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            exclude 'java/com/fluidnotions/databases/stackunderflow/util/JpaGraphqlMapper.java'
        }
    }
}


generateJava {
    packageName = 'com.fluidnotions.graphql.generated'
    generateClient = true
    typeMapping = [
            "Date"          : "java.time.LocalDate",
            "NonNegativeInt": "java.lang.Integer",
            "Url"           : "java.net.URL",
            "DateTime"      : "java.time.OffsetDateTime"
    ]
}
