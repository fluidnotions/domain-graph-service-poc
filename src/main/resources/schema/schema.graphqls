scalar Url
scalar Date
scalar NonNegativeInt
scalar DateTime


union SmartSearchResults = Show | Book

type Query {
    shows(titleFilter: String): [Show]
    books(authorFilter: String): [Book]
    booksByReleased(releasedInput: ReleaseHistoryInput!): BookList
    # overloading is not possible in gql therefore flexibility is achieved using input types with multiple fields, which determine how the resolver should behave
    mobileApps(mobileAppFilter: MobileAppFilter): [MobileApp]
    pets(petFilter: PetFilter): [Pet]
    """
    Example of a query with a union type:
    <pre>
        query ($keyword: String!){
            smartSearch(keyword: $keyword) {
                __typename

                ...on Show {
                    releaseYear
                    showTitle: title
                    __typename
                }

                ...on Book {
                    title
                    publisher
                    __typename
                }
            }
        }
    </pre>
    """
    smartSearch(keyword: String!): [SmartSearchResults]
    headerEcho: String

    #stack underflow example
    # create input types for more flexibility and extensibility for queries
    me: User!
    problemLatestList: [Problem!]
    itemSearch(filter: SearchInput): [SearchableItem]
    problemDetail(id: ID!): Problem
}

type Mutation{
    addShow(title: String!, releaseYear: Int!): Int
    deleteShow(title: String!): Int
    updateShow(title: String!, description: String!): [Show]

    #stack underflow example
    # on mutation types input is generally more specific
    userCreate(input: UserCreateInput!): UserResponse!
    userLogin(input: UserLoginInput!): UserResponse!
    userActivate(input: UserActivateInput!): UserActivateResponse!
    problemCreate(input: ProblemCreateInput!): ProblemResponse!
    solutionCreate(input: SolutionCreateInput!): SolutionResponse!
    solutionVote(input: SolutionVoteInput!): SolutionResponse!
}

type Subscription {
    randomStock: Stock
    #stack underflow example
    problemAdded: Problem!
    solutionVoteChanged: Solution!
}
